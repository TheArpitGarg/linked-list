#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node* next;
};
struct node* head;

void insert(int n,int data);//in function prototype, we did not require to fill argument
void insertAtBegin(int data);//so why i fill it?
void insertAtEnd(int data);//so i don't have to look in function i can do it just by looking at the prototypes
void print();
void deletion(int position);
void reverseByIteration();
void reversePrintingByRecursion(struct node* temp);//while doing recursion, we need to give pointer as argument bcoz if we don't
void forwardPrintingByRecursion(struct node* temp);//then we won't able to run this program by next address using recursion

int main()
{
head = NULL;
insert(1,3);
insert(1,4);
insert(2,5);
insert(2,7);
insertAtBegin(1);
insertAtEnd(6);
print();
deletion(3);
print();
reverseByIteration();
print();
forwardPrintingByRecursion(head);
printf("\n");
reversePrintingByRecursion(head);
    return 0;
}

void forwardPrintingByRecursion(struct node* temp){
if(temp!=NULL){
        printf("%d",temp->data);
    forwardPrintingByRecursion(temp->next);
}
}

void reversePrintingByRecursion(struct node* temp){
if(head==NULL)
    return;
if(temp->next!=NULL){
    reversePrintingByRecursion(temp->next);
}
printf("%d",temp->data);
};

void reverseByIteration(){
struct node *current ,*prev,*next;
current=head;
prev=NULL;
while(current!=NULL){
    next=current->next;
    current->next=prev;
    prev=current;
    current=next;
}
head=prev;
};

void insert(int n,int data){
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    if(n==1)
    {
        temp->next = head;
        temp->data = data;
        head = temp;
        return;
    }
    struct node* temp1=head;
    int i;
    for(i=1;i<n-1;i++)
        temp1=temp1->next;
    temp->next=temp1->next;
    temp1->next=temp;
    temp->data=data;
};
void insertAtBegin(int data){
struct node* temp=(struct node*)malloc(sizeof(struct node));
temp->data=data;
temp->next=head;
head=temp;
}
void print(){
struct node* temp=head;
while(temp!=NULL){
    printf("%d",temp->data);
    temp=temp->next;
}
printf("\n");
}
void deletion(int position){
struct node* temp=head;
int i;
for(i=1;i<position-1;i++)
    temp=temp->next;
struct node* temp1=(temp->next)->next;
free(temp->next);
temp->next=temp1;
}
void insertAtEnd(int data){
    struct node* temp1=(struct node*)malloc(sizeof(struct node));
        if(head==NULL){
        head=temp1;
        temp1->data=data;
        temp1->next=NULL;
        return;
    }
    struct node* temp=head;
    while(temp->next!=0)
        temp=temp->next;
    temp->next=temp1;
    temp1->data=data;
    temp1->next=NULL;
}
